{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "http://bioexcel.eu/biobb_ml/json_schemas/1.0/regression_neural_network",
    "name": "biobb_ml RegressionNeuralNetwork",
    "title": "Wrapper of the tf.keras.Sequential model",
    "description": "Trains and tests a given dataset and save the complete model for a Neural Network Regression. Visit the TensorFlow official website.",
    "type": "object",
    "info": {
        "wrapped_software": {
            "name": "tensorflow",
            "version": ">2.1.0",
            "license": "MIT"
        },
        "ontology": {
            "name": "EDAM",
            "schema": "http://edamontology.org/EDAM.owl"
        }
    },
    "required": [
        "input_dataset_path",
        "output_model_path"
    ],
    "properties": {
        "input_dataset_path": {
            "type": "string",
            "description": "Path to the input dataset",
            "filetype": "input",
            "sample": "https://github.com/bioexcel/biobb_ml/raw/master/biobb_ml/test/data/neural_networks/dataset_regression.csv",
            "enum": [
                ".*\\.csv$"
            ],
            "file_formats": [
                {
                    "extension": ".*\\.csv$",
                    "description": "Path to the input dataset"
                }
            ]
        },
        "output_model_path": {
            "type": "string",
            "description": "Path to the output model file",
            "filetype": "output",
            "sample": "http://github.com/bioexcel/biobb_ml/raw/master/biobb_ml/test/reference/neural_networks/ref_output_model_regression.h5",
            "enum": [
                ".*\\.h5$"
            ],
            "file_formats": [
                {
                    "extension": ".*\\.h5$",
                    "description": "Path to the output model file"
                }
            ]
        },
        "output_test_table_path": {
            "type": "string",
            "description": "Path to the test table file",
            "filetype": "output",
            "sample": "https://github.com/bioexcel/biobb_ml/raw/master/biobb_ml/test/reference/neural_networks/ref_output_test_regression.csv",
            "enum": [
                ".*\\.csv$"
            ],
            "file_formats": [
                {
                    "extension": ".*\\.csv$",
                    "description": "Path to the test table file"
                }
            ]
        },
        "output_plot_path": {
            "type": "string",
            "description": "Loss, MAE and MSE plots",
            "filetype": "output",
            "sample": "https://github.com/bioexcel/biobb_ml/raw/master/biobb_ml/test/reference/neural_networks/ref_output_plot_regression.png",
            "enum": [
                ".*\\.png$"
            ],
            "file_formats": [
                {
                    "extension": ".*\\.png$",
                    "description": "Loss, MAE and MSE plots"
                }
            ]
        },
        "properties": {
            "type": "object",
            "properties": {
                "features": {
                    "type": "object",
                    "default": {},
                    "wf_prop": false,
                    "description": "Independent variables or columns from your dataset you want to train. You can specify either a list of columns names from your input dataset, a list of columns indexes or a range of columns indexes. Formats: { \"columns\": [\"column1\", \"column2\"] } or { \"indexes\": [0, 2, 3, 10, 11, 17] } or { \"range\": [[0, 20], [50, 102]] }. In case of mulitple formats, the first one will be picked."
                },
                "target": {
                    "type": "object",
                    "default": {},
                    "wf_prop": false,
                    "description": "Dependent variable you want to predict from your dataset. You can specify either a column name or a column index. Formats: { \"column\": \"column3\" } or { \"index\": 21 }. In case of mulitple formats, the first one will be picked."
                },
                "weight": {
                    "type": "object",
                    "default": {},
                    "wf_prop": false,
                    "description": "Weight variable from your dataset. You can specify either a column name or a column index. Formats: { \"column\": \"column3\" } or { \"index\": 21 }. In case of mulitple formats, the first one will be picked."
                },
                "validation_size": {
                    "type": "number",
                    "default": 0.2,
                    "wf_prop": false,
                    "description": "Represents the proportion of the dataset to include in the validation split. It should be between 0.0 and 1.0."
                },
                "test_size": {
                    "type": "number",
                    "default": 0.1,
                    "wf_prop": false,
                    "description": "Represents the proportion of the dataset to include in the test split. It should be between 0.0 and 1.0."
                },
                "hidden_layers": {
                    "type": "array",
                    "default": null,
                    "wf_prop": false,
                    "description": "List of dictionaries with hidden layers values. Format: [ { 'size': 50, 'activation': 'relu' } ]."
                },
                "output_layer_activation": {
                    "type": "string",
                    "default": "softmax",
                    "wf_prop": false,
                    "description": "Activation function to use in the output layer. ",
                    "enum": [
                        "sigmoid",
                        "tanh",
                        "relu",
                        "softmax"
                    ],
                    "property_formats": [
                        {
                            "name": "sigmoid",
                            "description": null
                        },
                        {
                            "name": "tanh",
                            "description": null
                        },
                        {
                            "name": "relu",
                            "description": null
                        },
                        {
                            "name": "softmax",
                            "description": null
                        }
                    ]
                },
                "optimizer": {
                    "type": "string",
                    "default": "Adam",
                    "wf_prop": false,
                    "description": "Name of optimizer instance. ",
                    "enum": [
                        "Adadelta",
                        "Adagrad",
                        "Adam",
                        "Adamax",
                        "Ftrl",
                        "Nadam",
                        "RMSprop",
                        "SGD"
                    ],
                    "property_formats": [
                        {
                            "name": "Adadelta",
                            "description": null
                        },
                        {
                            "name": "Adagrad",
                            "description": null
                        },
                        {
                            "name": "Adam",
                            "description": null
                        },
                        {
                            "name": "Adamax",
                            "description": null
                        },
                        {
                            "name": "Ftrl",
                            "description": null
                        },
                        {
                            "name": "Nadam",
                            "description": null
                        },
                        {
                            "name": "RMSprop",
                            "description": null
                        },
                        {
                            "name": "SGD",
                            "description": null
                        }
                    ]
                },
                "learning_rate": {
                    "type": "number",
                    "default": 0.02,
                    "wf_prop": false,
                    "description": "Determines the step size at each iteration while moving toward a minimum of a loss function"
                },
                "batch_size": {
                    "type": "integer",
                    "default": 100,
                    "wf_prop": false,
                    "description": "Number of samples per gradient update."
                },
                "max_epochs": {
                    "type": "integer",
                    "default": 100,
                    "wf_prop": false,
                    "description": "Number of epochs to train the model. As the early stopping is enabled, this is a maximum."
                },
                "random_state": {
                    "type": "integer",
                    "default": 5,
                    "wf_prop": false,
                    "description": "Controls the shuffling applied to the data before applying the split. ."
                },
                "scale": {
                    "type": "boolean",
                    "default": false,
                    "wf_prop": false,
                    "description": "Whether or not to scale the input dataset."
                },
                "remove_tmp": {
                    "type": "boolean",
                    "default": true,
                    "wf_prop": true,
                    "description": "Remove temporal files."
                },
                "restart": {
                    "type": "boolean",
                    "default": false,
                    "wf_prop": true,
                    "description": "Do not execute if output files exist."
                }
            }
        }
    },
    "additionalProperties": false
}